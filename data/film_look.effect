// =========================================================================
//  Film Look Creator - OBS Effect File
// =========================================================================

// --- Uniforms ---
// 这些uniform变量将由我们的C++代码通过obs_data_t设置来填充
uniform float contrast;
uniform float teal_amount;
uniform float orange_amount;
uniform float bloom_intensity;
uniform float bloom_threshold;
uniform int bloom_radius;
uniform float halation_intensity;
uniform float halation_threshold;
uniform int halation_radius;
uniform float secondary_glow_intensity;
uniform float secondary_glow_threshold;
uniform int secondary_glow_radius;
uniform float grain_intensity;
uniform float shake_intensity;
uniform float shake_speed;

// OBS会自动提供这些内置变量
uniform float4x4 ViewProj;
uniform texture2d image;
uniform float2 uv_size;
uniform float elapsed_time;

// --- Sampler ---
sampler_state textureSampler {
Filter    = Linear;
AddressU  = Clamp;
AddressV  = Clamp;
};

// --- Vertex Shader ---
// 一个标准的顶点着色器，用于全屏滤镜
struct VertData {
float4 pos : POSITION;
float2 uv  : TEXCOORD0;
};

VertData main_vertex_shader(VertData v_in)
{
VertData v_out = v_in;
v_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
return v_out;
}

// --- Helper Functions ---
float random(float2 st) {
return frac(sin(dot(st.xy, float2(12.9898, 78.233))) * 43758.5453123);
}

float3 BlendScreen(float3 base, float3 blend)
{
return 1.0 - ((1.0 - base) * (1.0 - blend));
}

// --- Pixel Shader ---
// 这是你原有的核心代码
float4 pixel_shader(VertData v_in) : TARGET
{
// === PART 0: CAMERA SHAKE ===
float2 shake_offset = float2(0.0, 0.0);
if (shake_intensity > 0.0) {
float time = elapsed_time * shake_speed;
float shake_x = (sin(time * 1.3 + 0.5) + sin(time * 2.7 + 1.2)) * 0.5;
float shake_y = (cos(time * 1.7 - 0.8) + cos(time * 3.1 - 0.3)) * 0.5;
shake_offset = float2(shake_x, shake_y) * shake_intensity;
}
float2 shaken_uv = v_in.uv + shake_offset;


// === PART 1: CINEMATIC COLOR GRADING ===
float4 original_color = image.Sample(textureSampler, shaken_uv);
float3 graded_color = original_color.rgb;

graded_color = pow(graded_color, float3(contrast, contrast, contrast));
float luma = dot(graded_color, float3(0.299, 0.587, 0.114));
float3 teal_color = float3(0.7, 0.85, 1.0);
float3 orange_color = float3(1.0, 0.9, 0.7);
graded_color = lerp(graded_color, teal_color, smoothstep(0.5, 1.0, luma) * teal_amount);
graded_color = lerp(graded_color, orange_color, smoothstep(0.4, 0.0, luma) * orange_amount);


// === PART 2: CALCULATE EFFECTS (BLOOM, HALATION, SECONDARY GLOW) ===
float3 bloom_accum = float3(0,0,0);
float3 halation_accum = float3(0,0,0);
float3 secondary_glow_accum = float3(0,0,0);
float2 pixel_size = uv_size;

int max_radius_for_loop = max(bloom_radius, halation_radius);
max_radius_for_loop = max(max_radius_for_loop, secondary_glow_radius);

float bloom_sample_count = 0.0;
float halation_sample_count = 0.0;
float secondary_glow_sample_count = 0.0;

[loop]
for (int x = -max_radius_for_loop; x <= max_radius_for_loop; x++) {
[loop]
for (int y = -max_radius_for_loop; y <= max_radius_for_loop; y++) {
float2 offset = float2(x, y);
float2 sample_uv = shaken_uv + offset * pixel_size;
float3 sample_color = image.Sample(textureSampler, sample_uv).rgb;
float sample_luma = dot(sample_color, float3(0.299, 0.587, 0.114));

if (bloom_intensity > 0.0 && abs(x) <= bloom_radius && abs(y) <= bloom_radius) {
float bright_factor = smoothstep(bloom_threshold, 1.0, sample_luma);
bloom_accum += sample_color * bright_factor;
bloom_sample_count += 1.0;
}

if (halation_intensity > 0.0 && abs(x) <= halation_radius && abs(y) <= halation_radius) {
float halation_bright_factor = smoothstep(halation_threshold, 1.0, sample_luma);
float3 tinted_color = sample_color * float3(1.0, 0.2, 0.1);
halation_accum += tinted_color * halation_bright_factor;
halation_sample_count += 1.0;
}

if (secondary_glow_intensity > 0.0 && abs(x) <= secondary_glow_radius && abs(y) <= secondary_glow_radius) {
float sg_bright_factor = smoothstep(secondary_glow_threshold, 1.0, sample_luma);
float3 sg_tint = float3(0.6, 0.8, 1.0);
secondary_glow_accum += (sample_color * sg_tint) * sg_bright_factor;
secondary_glow_sample_count += 1.0;
}
}
}

if (bloom_sample_count > 0.0) { bloom_accum /= bloom_sample_count; }
if (halation_sample_count > 0.0) { halation_accum /= halation_sample_count; }
if (secondary_glow_sample_count > 0.0) { secondary_glow_accum /= secondary_glow_sample_count; }


// === PART 3: COMBINE EVERYTHING ===
float3 final_color = graded_color;

if (bloom_intensity > 0.0) {
final_color += bloom_accum * bloom_intensity;
}

if (halation_intensity > 0.0) {
final_color = BlendScreen(final_color, halation_accum * halation_intensity);
}

if (secondary_glow_intensity > 0.0) {
final_color = BlendScreen(final_color, secondary_glow_accum * secondary_glow_intensity);
}

float2 grain_seed_uv = shaken_uv + frac(elapsed_time);
float grain = (random(grain_seed_uv) - 0.5) * 2.0;
final_color += grain * grain_intensity;

return float4(clamp(final_color, 0.0, 1.0), original_color.a);
}


// --- Technique ---
// 这里定义了我们的渲染技术，告诉OBS使用哪个顶点和像素着色器
technique Draw
{
pass
{
vertex_shader = main_vertex_shader(v_in);
pixel_shader  = pixel_shader(v_in);
}
}
